#!/usr/bin/env bash

# Copyright (C) 2018 Pooya Parsa <pooya@pi0.ir>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Exit on any error
set -e

# Default options
export HTTP_CLIENT=${HTTP_CLIENT:-"auto"}
export BASE_URL=${BASE_URL:-"https://login.aut.ac.ir"}
export LOGIN_ENDPOINT=${LOGIN_ENDPOINT:-"/login"}
export LOGOUT_ENDPOINT=${LOGOUT_ENDPOINT:-"/logout"}
export USERNAME=${USERNAME:-""}
export PASSWORD=${PASSWORD:-""}
export ALLOW_EMPTY=${ALLOW_EMPTY:-0}
export SUCCESS_CODE=${SUCCESS_CODE:-302}
export CHECK_URL=${CHECK_URL:-"http://icanhazip.com"}
export CHECK_SUCCESS_CODE=${CHECK_SUCCESS_CODE:-200}

#------------------------------------------------------
# login function
#------------------------------------------------------
login () {
    # Ensure username and password are set
    if [ $ALLOW_EMPTY -eq 0 ] ; then
        [ -z "$USERNAME" ] && prompt "USERNAME" "Enter username"
        [ -z "$PASSWORD" ] && prompt "PASSWORD" "Enter password"
    fi

    local code=`_request "${BASE_URL}${LOGIN_ENDPOINT}" "username=${USERNAME}&password=${PASSWORD}"`
    
    if [ $code -eq "${SUCCESS_CODE}" ]; then
        echo "Login was successful"
        return 0
    else
        echo "Error while logging in"
        return 1
    fi
}

#------------------------------------------------------
# logout function
#------------------------------------------------------
logout () {
    local code=`_request "${BASE_URL}${LOGOUT_ENDPOINT}"`
    
    if [ "$code" -eq "${SUCCESS_CODE}" ]; then
        ok "Logout was successful"
    else
        err "Error while logging out"
    fi
}

#------------------------------------------------------
# logout function
#------------------------------------------------------
logout () {
    local code=`_request "${BASE_URL}${LOGOUT_ENDPOINT}"`
    
    if [ "$code" -eq "302" ]; then
        ok "Logout was successful"
    else
        err "Error while logging out"
    fi
}

#------------------------------------------------------
# check function
#------------------------------------------------------
check () {
    local code=`_request "${CHECK_URL}"`
    
    if [ "$code" -eq "${CHECK_SUCCESS_CODE}" ]; then
        ok "Check was successful"
    else
        err "Login required"
    fi
}

#------------------------------------------------------
# _request function
# Usage: _request path [post_data]
# Returns: http status code or -1 if any error occurs
#------------------------------------------------------
_request () {
    local url=$1
    local data=$2

    local args=''
    local code

    case "${HTTP_CLIENT}" in
        curl)
            # Make it silent
            args+=' -s -o /dev/null'

            # Return http status code
            args+=' -w %{http_code}'

            # Make a POST request if data provided
            if [ ! -z "$data" ] ; then
                args+=" -X POST -d ${data}"
            fi

            # Append url
            args+=" $url"

            # Execute curl
            code=`curl $args`
        ;;
        wget)
            # Make it silent
            args+=' -q -O /dev/null'

            #  Print HTTP headers
            args+=' -S'

            # Make a POST request if data provided
            if [ ! -z "$data" ] ; then
                args+=" --post-data=${data}"
            fi

            # Append url
            args+=" $url"

            # Execute wget
            code=`wget $args 2>&1 | head -n1 | cut -d " " -f4`
        ;;
        *)
            die "Invalid http client: ${HTTP_CLIENT}"
        ;;
    esac

    echo ${code:-"-1"}
}

#------------------------------------------------------
# Utils
#------------------------------------------------------
version () {
    echo "Headless Login 1.0.0"
}

usage () {
    version
    echo
    cat <<EOF
    Usage: hlogin [login|logout|check] [--help] [OPTION...] 

    Automated HTTP login utility for headless environments

    Options:
        -u, --username VAL    Set login username
        -p, --password VAL    Set login password
        -c, --client VAL      Set http client to make requests. (Possible values: auto|curl|wget)
        --test-url VAL        Set auth test url (Default to "http://icanhazip.com")
        --base VAL            Set http client base url (Defauts to "https://login.aut.ac.ir")
        --login-endpoint VAL  Set login endpoint (Defaults to "/login")
        --logout-endpoint VAL Set logout endpoint (Defaults to "/logout")
        --allow-empty         Allow using empty username and password

        -h, --help            Display this help message
        -v, --version         Display version
        -x, --debug               Debug mode. Shows all internal invoked commands

    Supported environment variables:
        - USERNAME
        - PASSWORD
        - HTTP_CLIENT
        - TEST_URL
        - BASE_URL
        - LOGIN_ENDPOINT
        - LOGOUT_ENDPOINT
        - ALLOW_EMPTY
        - SUCCESS_CODE
        - CHECK_SUCCESS_CODE

EOF
}

die () {
    usage
    echo "[Error] $1"
    exit 1
}

prompt() {
    local var=$1
    local msg=$2
    while [ -z "${!var}" ]; do
        read -p " » $msg: " $var
    done
}

ok() {
    local msg=$1
    echo " ✓ $msg"
    exit 0
}

err() {
    local msg=$1
    echo " x $msg"
    exit 1
}

#------------------------------------------------------
# Entrypoint
#------------------------------------------------------

# 1. Get and validate command
COMMAND=$1

case $COMMAND in
    login|logout|check) shift ;;
    printenv) shift ;;
    -v|--version|-h|--help) ;;
    *) die "Unknown command: $COMMAND"; exit 1 ;;
esac

# 2. Parse options
while [ $# -gt 0 ]; do
    case "$1" in
        -u|--username)          shift; USERNAME=$1; shift ;;
        -p|--password)          shift; PASSWORD=$1; shift ;;
        -c|--client)            shift; HTTP_CLIENT=$1; shift ;;
        --check-url)            shift; CHECK_URL=$1; shift ;;
        --check-success-code)   shift; CHECK_SUCCESS_CODE=$1; shift ;;
        --base)                 shift; BASE_URL=$1; shift ;;
        --login-endpoint)       shift; LOGIN_ENDPOINT=$1; shift ;;
        --logout-endpoint)      shift; LOGOUT_ENDPOINT=$1; shift ;;
        --success-code)         shift; SUCCESS_CODE=$1; shift ;;
        --allow-empty)          shift; ALLOW_EMPTY=1 ;;
        

        -h|--help)              usage; exit 0 ;;
        -v|--version)           version; exit 0 ;;
        -x| --debug)            shift; set -x ;;
        -*)                     die "Unrecognized option: $1" ;;
        *)                      die "Invalid option: $1" ;;
    esac
done

# 3. Chooce the best HTTP_CLIENT if set to auto
if [ ! -x "$(command -v ${HTTP_CLIENT})" ] && [ "${HTTP_CLIENT}" = "auto" ] ; then
    if [ -x "$(command -v curl)" ]; then
        HTTP_CLIENT="curl"
    elif [ -x "$(command -v wget)" ]; then
        HTTP_CLIENT="wget"
    else
        die "No HTTP client is available! Either curl or wget is required."
    fi
fi

# 4. Invoke command
$COMMAND
