#!/usr/bin/env bash

# Copyright (C) 2018 Pooya Parsa <pooya@pi0.ir>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Strictly exit on any error
set -e

# Login command
login () {
    # Ensure username and password are set
    ensure_user_pass

    local code=`_request "${BASE_URL}${LOGIN_ENDPOINT}" "username=${USERNAME}&password=${PASSWORD}"`
    
    if [ $code -eq "${SUCCESS_CODE}" ]; then
        echo "Login was successful"
        return 0
    else
        echo "Error while logging in"
        return 1
    fi
}

# Logout command
logout () {
    local code=`_request "${BASE_URL}${LOGOUT_ENDPOINT}"`
    
    if [ "$code" -eq "${SUCCESS_CODE}" ]; then
        ok "Logout was successful"
    else
        err "Error while logging out"
    fi
}

# Loop command
loop () {
    # Ensure username and password are set
    ensure_user_pass

    while true ; do
        # Test connectivity
        if $0 test > /dev/null ; then
            log "Connected"
        else 
            # Try to login
            log "Tring to login..."
            if $0 login > /dev/null ; then
                log "Login successful"
            else
                log "Login failed"
            fi
        fi

        log "Sleeping for $LOOP_INTERVAL seconds"
        sleep "$LOOP_INTERVAL"
    done;
}

# Test command
test () {
    local code=`_request "${TEST_URL}"`
    
    if [ "$code" -eq "${TEST_SUCCESS_CODE}" ]; then
        ok "test was successful"
    else
        err "Login required"
    fi
}

#------------------------------------------------------
# _request function
# Usage: _request path [post_data]
# Returns: http status code or -1 if any error occurs
#------------------------------------------------------
_request () {
    local url=$1
    local data=$2

    local args=''
    local code

    case "${HTTP_CLIENT}" in
        curl)
            # Make it silent
            args+=' -s -o /dev/null'

            # Return http status code
            args+=' -w %{http_code}'

            # Make a POST request if data provided
            if [ ! -z "$data" ] ; then
                args+=" -X POST -d ${data}"
            fi

            # Append url
            args+=" $url"

            # Execute curl
            code=`curl $args`
        ;;
        wget)
            # Make it silent
            args+=' -q -O /dev/null'

            #  Print HTTP headers
            args+=' -S'

            # Make a POST request if data provided
            if [ ! -z "$data" ] ; then
                args+=" --post-data=${data}"
            fi

            # Append url
            args+=" $url"

            # Execute wget
            code=`wget $args 2>&1 | head -n1 | cut -d " " -f4`
        ;;
        *)
            die "Invalid http client: ${HTTP_CLIENT}"
        ;;
    esac

    echo ${code:-"-1"}
}

#------------------------------------------------------
# Utils
#------------------------------------------------------
version () {
    echo "Captive Login 1.0.0"
}

usage () {
    version
    echo
    cat <<EOF
    Usage: clogin login|logout|loop|test [--help] [OPTION...] 

    Captive-portal login utility for headless environments written in pure bash

    Options:
        -f, --conf              Path to config file (Defaults to "clogin.conf")
        -l, --log-file <val>     Set log file (Defaults to `/dev/stderr`)

        -u, --username <val>    Set login username
        -p, --password <val>    Set login password
        --allow-empty           Allow using empty username and password

        -c, --client <val>      Set http client to make requests. (Possible values: auto|curl|wget)
        --base <val>            Set http client base url (Defauts to "https://login.aut.ac.ir")
        --login-endpoint <val>  Set login endpoint (Defaults to "/login")
        --logout-endpoint <val> Set logout endpoint (Defaults to "/logout")

        --test-url <val>        Set connectivity test url (Default to "http://icanhazip.com")

        --loop-interval <val>   Set loop interval in seconds (Defaults to 1800 = 30 minutes)
        
        -h, --help              Display this help message
        -v, --version           Display version
        -x, --debug             Debug mode. Shows all internal invoked commands

    Supported environment variables:
        - CONFIG_FILE
        - LOG_FILE

        - USERNAME
        - PASSWORD
        - ALLOW_EMPTY

        - HTTP_CLIENT
        - BASE_URL
        - LOGIN_ENDPOINT
        - LOGOUT_ENDPOINT
        - SUCCESS_CODE

        - TEST_URL
        - TEST_SUCCESS_CODE

        - LOOP_INTERVAL
EOF
}

die () {
    echo "[Error] $1"
    exit 1
}

log() {
    local msg=$1
    
    local timestamp=`date "+%Y-%m-%d %H:%M:%S"`
    local log="[$timestamp] $msg"

    if [ ! -z $LOG_FILE ] ; then
        echo $log >> $LOG_FILE
    else
        echo $log
    fi
}

prompt() {
    local var=$1
    local msg=$2
    while [ -z "${!var}" ]; do
        read -p " » $msg: " $var
    done
}

ensure_user_pass () {
    if [ $ALLOW_EMPTY -eq 0 ] ; then
        if [ -z "$USERNAME" ]; then
            prompt "USERNAME" "Enter username"
        fi
        if [ -z "$PASSWORD" ]; then
            prompt "PASSWORD" "Enter password"
        fi
    fi
}

ok() {
    local msg=$1
    echo " ✓ $msg"
    exit 0
}

err() {
    local msg=$1
    echo " x $msg"
    exit 1
}

readconf () {
    local file=$1
    for line in `cat $file | grep "^[A-Z]"`; do
        key=`echo $line|cut -d '=' -f1`
        val=`echo $line|cut -d '=' -f2`
        if [ ! -z "$key" ] && [ ! -z "$val" ] ; then
            if [ ! ${!key} ] ; then
                export $key=$val
            fi
        fi
    done
}

#------------------------------------------------------
# Entrypoint
#------------------------------------------------------

# Try to apply configuarion files from standard locations before parsing options
for file in "/usr/local/etc/clogin.conf" "/etc/clogin.conf" "~/.clogin.conf"; do
    [ ! -r $file ] && continue
    readconf $file
done

# Default options
export CONFIG_FILE=${CONFIG_FILE:-"clogin.conf"}
export LOG_FILE=${LOG_FILE:-"/dev/stderr"}

export HTTP_CLIENT=${HTTP_CLIENT:-"auto"}
export BASE_URL=${BASE_URL:-"https://login.aut.ac.ir"}
export LOGIN_ENDPOINT=${LOGIN_ENDPOINT:-"/login"}
export LOGOUT_ENDPOINT=${LOGOUT_ENDPOINT:-"/logout"}
export SUCCESS_CODE=${SUCCESS_CODE:-302}

export USERNAME=${USERNAME:-""}
export PASSWORD=${PASSWORD:-""}
export ALLOW_EMPTY=${ALLOW_EMPTY:-0}

export TEST_URL=${TEST_URL:-"http://icanhazip.com"}
export TEST_SUCCESS_CODE=${TEST_SUCCESS_CODE:-200}

export LOOP_INTERVAL=${LOOP_INTERVAL:-1800}

# Get and validate command
COMMAND=$1

case $COMMAND in
    login|logout|loop|test) shift ;;
    printenv) shift ;;
    -v|--version|-h|--help) ;;
    '') usage; exit 1 ;;
    *) die "Unknown command: $COMMAND"; exit 1 ;;
esac

# Parse options
while [ $# -gt 0 ]; do
    case "$1" in
        -f|--conf)              shift; CONFIG_FILE=$1; shift ;;
        -l|--log-file)           shift; LOG_FILE=$1; shift ;;

        -u|--username)          shift; USERNAME=$1; shift ;;
        -p|--password)          shift; PASSWORD=$1; shift ;;
        --allow-empty)          shift; ALLOW_EMPTY=1 ;;

        -c|--client)            shift; HTTP_CLIENT=$1; shift ;;
        --base)                 shift; BASE_URL=$1; shift ;;
        --login-endpoint)       shift; LOGIN_ENDPOINT=$1; shift ;;
        --logout-endpoint)      shift; LOGOUT_ENDPOINT=$1; shift ;;
        --success-code)         shift; SUCCESS_CODE=$1; shift ;;

        --test-url)             shift; TEST_URL=$1; shift ;;
        --test-success-code)    shift; TEST_SUCCESS_CODE=$1; shift ;;

        --loop-interval)        shift; LOOP_INTERVAL=$1; shift ;;

        -h|--help)              usage; exit 0 ;;
        -v|--version)           version; exit 0 ;;
        -x| --debug)            shift; set -x ;;

        -*)                     die "Unrecognized option: $1" ;;
        *)                      die "Invalid option: $1" ;;
    esac
done

# Apply config file, if provided
if [ -r $CONFIG_FILE ]; then
    readconf $CONFIG_FILE
fi

# Chooce the best HTTP_CLIENT if set to auto
if [ ! -x "$(command -v ${HTTP_CLIENT})" ] && [ "${HTTP_CLIENT}" = "auto" ] ; then
    if [ -x "$(command -v curl)" ]; then
        HTTP_CLIENT="curl"
    elif [ -x "$(command -v wget)" ]; then
        HTTP_CLIENT="wget"
    else
        die "No HTTP client is available! Either curl or wget is required."
    fi
fi

# Invoke command
$COMMAND
